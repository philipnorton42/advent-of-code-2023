<?php

namespace Philipnorton42\AdventOfCode2023\Test;

require './11/functions.php';

use PHPUnit\Framework\TestCase;

class ElevenTest extends TestCase {

  /**
   * @dataProvider extractGalaxyDataDataProvider
   */
  public function testExtractGalaxyData($string, $expectedResult) {
    $result = extractGalaxyData($string);
    $this->assertEquals($expectedResult, $result);
  }

  public static function extractGalaxyDataDataProvider() {
    $output = [];

    $inputData1 = <<<EOD
...#......
.......#..
#.........
..........
......#...
.#........
.........#
..........
.......#..
#...#.....
EOD;

    $output[] = [
      $inputData1,
      [
        ['.','.','.','#','.','.','.','.','.','.'],
        ['.','.','.','.','.','.','.','#','.','.'],
        ['#','.','.','.','.','.','.','.','.','.'],
        ['.','.','.','.','.','.','.','.','.','.'],
        ['.','.','.','.','.','.','#','.','.','.'],
        ['.','#','.','.','.','.','.','.','.','.'],
        ['.','.','.','.','.','.','.','.','.','#'],
        ['.','.','.','.','.','.','.','.','.','.'],
        ['.','.','.','.','.','.','.','#','.','.'],
        ['#','.','.','.','#','.','.','.','.','.'],
      ],
    ];

    return $output;
  }

  /**
   * @dataProvider expandSpaceDataProvider
   */
  public function testExpandSpace($string, $expectedResult) {
    $result = expandSpace($string);
    $this->assertEquals($expectedResult, $result);
  }

  public static function expandSpaceDataProvider() {
    $output = [];

    $output[] = [
      [
        ['.','.','.','#','.','.','.','.','.','.'],
        ['.','.','.','.','.','.','.','#','.','.'],
        ['#','.','.','.','.','.','.','.','.','.'],
        ['.','.','.','.','.','.','.','.','.','.'],
        ['.','.','.','.','.','.','#','.','.','.'],
        ['.','#','.','.','.','.','.','.','.','.'],
        ['.','.','.','.','.','.','.','.','.','#'],
        ['.','.','.','.','.','.','.','.','.','.'],
        ['.','.','.','.','.','.','.','#','.','.'],
        ['#','.','.','.','#','.','.','.','.','.'],
      ],
      [
        ['.','.','.','.','#','.','.','.','.','.','.','.','.'],
        ['.','.','.','.','.','.','.','.','.','#','.','.','.'],
        ['#','.','.','.','.','.','.','.','.','.','.','.','.'],
        ['.','.','.','.','.','.','.','.','.','.','.','.','.'],
        ['.','.','.','.','.','.','.','.','.','.','.','.','.'],
        ['.','.','.','.','.','.','.','.','#','.','.','.','.'],
        ['.','#','.','.','.','.','.','.','.','.','.','.','.'],
        ['.','.','.','.','.','.','.','.','.','.','.','.','#'],
        ['.','.','.','.','.','.','.','.','.','.','.','.','.'],
        ['.','.','.','.','.','.','.','.','.','.','.','.','.'],
        ['.','.','.','.','.','.','.','.','.','#','.','.','.'],
        ['#','.','.','.','.','#','.','.','.','.','.','.','.'],
      ],
    ];

    return $output;
  }

  /**
   * @dataProvider numberGalaxiesDataProvider
   */
  public function testNumberGalaxies($string, $expectedResult) {
    $result = numberGalaxies($string);
    $this->assertEquals($expectedResult, $result);
  }

  public static function numberGalaxiesDataProvider() {
    $output = [];

    $output[] = [
      [
        ['.','.','.','.','#','.','.','.','.','.','.','.','.'],
        ['.','.','.','.','.','.','.','.','.','#','.','.','.'],
        ['#','.','.','.','.','.','.','.','.','.','.','.','.'],
        ['.','.','.','.','.','.','.','.','.','.','.','.','.'],
        ['.','.','.','.','.','.','.','.','.','.','.','.','.'],
        ['.','.','.','.','.','.','.','.','#','.','.','.','.'],
        ['.','#','.','.','.','.','.','.','.','.','.','.','.'],
        ['.','.','.','.','.','.','.','.','.','.','.','.','#'],
        ['.','.','.','.','.','.','.','.','.','.','.','.','.'],
        ['.','.','.','.','.','.','.','.','.','.','.','.','.'],
        ['.','.','.','.','.','.','.','.','.','#','.','.','.'],
        ['#','.','.','.','.','#','.','.','.','.','.','.','.'],
      ],
      [
        1 => ['x' => 0, 'y' => 4],
        2 => ['x' => 1, 'y' => 9],
        3 => ['x' => 2, 'y' => 0],
        4 => ['x' => 5, 'y' => 8],
        5 => ['x' => 6, 'y' => 1],
        6 => ['x' => 7, 'y' => 12],
        7 => ['x' => 10, 'y' => 9],
        8 => ['x' => 11, 'y' => 0],
        9 => ['x' => 11, 'y' => 5],
      ],
    ];

    return $output;
  }

  /**
   * @dataProvider findPairsDataProvider
   */
  public function testFindPairs($string, $expectedResult, $expectedCount) {
    $result = findPairs($string);
    $this->assertEquals($expectedResult, $result);
    $this->assertEquals($expectedCount, count($result));
  }

  public static function findPairsDataProvider() {
    $output = [];

    $output[] = [
      [
        1 => ['x' => 0, 'y' => 4],
        2 => ['x' => 1, 'y' => 9],
        3 => ['x' => 2, 'y' => 0],
        4 => ['x' => 5, 'y' => 8],
        5 => ['x' => 6, 'y' => 1],
        6 => ['x' => 7, 'y' => 12],
        7 => ['x' => 10, 'y' => 9],
        8 => ['x' => 11, 'y' => 0],
        9 => ['x' => 11, 'y' => 5],
      ],
      [
        [1,2],
        [1,3],
        [1,4],
        [1,5],
        [1,6],
        [1,7],
        [1,8],
        [1,9],
        [2,3],
        [2,4],
        [2,5],
        [2,6],
        [2,7],
        [2,8],
        [2,9],
        [3,4],
        [3,5],
        [3,6],
        [3,7],
        [3,8],
        [3,9],
        [4,5],
        [4,6],
        [4,7],
        [4,8],
        [4,9],
        [5,6],
        [5,7],
        [5,8],
        [5,9],
        [6,7],
        [6,8],
        [6,9],
        [7,8],
        [7,9],
        [8,9],
      ],
      36
    ];

    return $output;
  }

  /**
   * @dataProvider distanceDataProvider
   */
  public function testDistance($coordinate1, $coordinate2, $expectedResult) {
    $result = distance($coordinate1, $coordinate2);
    $this->assertEquals($expectedResult, $result);
  }

  public static function distanceDataProvider() {
    $output = [];

    $output[] = [
      ['x' => 6, 'y' => 1], // 5
      ['x' => 11, 'y' => 5], // 9
      9,
    ];

    $output[] = [
      ['x' => 0, 'y' => 4], // 1
      ['x' => 10, 'y' => 9], // 7
      15,
    ];

    $output[] = [
      ['x' => 11, 'y' => 0], // 8
      ['x' => 11, 'y' => 5], // 9
      5,
    ];



    return $output;
  }

}
